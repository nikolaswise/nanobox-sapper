{
  "errors": [],
  "warnings": [],
  "version": "4.1.0",
  "hash": "0742ac9a1c70f1e27089",
  "time": 5,
  "builtAt": 1525839395034,
  "publicPath": "",
  "outputPath": "/Users/nikolaswise/Department/paper-club/.sapper",
  "assetsByChunkName": {
    "service-worker": "service-worker.js"
  },
  "assets": [
    {
      "name": "service-worker.js",
      "size": 8975,
      "chunks": [
        "service-worker"
      ],
      "chunkNames": [
        "service-worker"
      ],
      "emitted": false
    }
  ],
  "filteredAssets": 0,
  "entrypoints": {
    "service-worker": {
      "chunks": [
        "service-worker"
      ],
      "assets": [
        "service-worker.js"
      ]
    }
  },
  "chunks": [
    {
      "id": "service-worker",
      "rendered": false,
      "initial": true,
      "entry": true,
      "size": 4328,
      "names": [
        "service-worker"
      ],
      "files": [
        "service-worker.js"
      ],
      "hash": "b6157ba67d68231a953f",
      "siblings": [],
      "parents": [],
      "children": [],
      "modules": [
        {
          "id": "./app/manifest/service-worker.js",
          "identifier": "/Users/nikolaswise/Department/paper-club/app/manifest/service-worker.js",
          "name": "./app/manifest/service-worker.js",
          "index": 1,
          "index2": 0,
          "size": 2165,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            "service-worker"
          ],
          "assets": [],
          "issuer": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
          "issuerId": "./app/service-worker.js",
          "issuerName": "./app/service-worker.js",
          "issuerPath": [
            {
              "id": "./app/service-worker.js",
              "identifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
              "name": "./app/service-worker.js"
            }
          ],
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": "./app/service-worker.js",
              "moduleIdentifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
              "module": "./app/service-worker.js",
              "moduleName": "./app/service-worker.js",
              "type": "harmony side effect evaluation",
              "userRequest": "./manifest/service-worker.js",
              "loc": "1:0-80"
            },
            {
              "moduleId": "./app/service-worker.js",
              "moduleIdentifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
              "module": "./app/service-worker.js",
              "moduleName": "./app/service-worker.js",
              "type": "harmony import specifier",
              "userRequest": "./manifest/service-worker.js",
              "loc": "3:23-32"
            },
            {
              "moduleId": "./app/service-worker.js",
              "moduleIdentifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
              "module": "./app/service-worker.js",
              "moduleName": "./app/service-worker.js",
              "type": "harmony import specifier",
              "userRequest": "./manifest/service-worker.js",
              "loc": "7:17-22"
            },
            {
              "moduleId": "./app/service-worker.js",
              "moduleIdentifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
              "module": "./app/service-worker.js",
              "moduleName": "./app/service-worker.js",
              "type": "harmony import specifier",
              "userRequest": "./manifest/service-worker.js",
              "loc": "7:30-36"
            },
            {
              "moduleId": "./app/service-worker.js",
              "moduleIdentifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
              "module": "./app/service-worker.js",
              "moduleName": "./app/service-worker.js",
              "type": "harmony import specifier",
              "userRequest": "./manifest/service-worker.js",
              "loc": "64:19-28"
            }
          ],
          "providedExports": [
            "timestamp",
            "assets",
            "shell",
            "routes"
          ],
          "optimizationBailout": [],
          "depth": 1,
          "source": "// This file is generated by Sapper â€” do not edit it!\nexport const timestamp = 1525839394752;\n\nexport const assets = [\n\t\"favicon.png\",\n\t\"global.css\",\n\t\"great-success.png\",\n\t\"manifest.json\",\n\t\"svelte-logo-192.png\",\n\t\"svelte-logo-512.png\"\n];\n\nexport const shell = [\n\t\"/client/3ff939b3ba2f839b0163/account_orders_id.account_orders_id.js\",\n\t\"/client/3ff939b3ba2f839b0163/_._.js\",\n\t\"/client/3ff939b3ba2f839b0163/_5xx._5xx.js\",\n\t\"/client/3ff939b3ba2f839b0163/_~_4xx~_5xx~account~account_items~account_items_edit~account_items_new~account_orders_id~account_set~afba5f34._~_4xx~_5xx~account~account_items~account_items_edit~account_items_new~account_orders_id~account_set~afba5f34.js\",\n\t\"/client/3ff939b3ba2f839b0163/account.account.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_items.account_items.js\",\n\t\"/client/3ff939b3ba2f839b0163/0.0.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_items_edit.account_items_edit.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_items_new.account_items_new.js\",\n\t\"/client/3ff939b3ba2f839b0163/_4xx._4xx.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_settings.account_settings.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_settings_add_card.account_settings_add_card.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_settings_edit_card.account_settings_edit_card.js\",\n\t\"/client/3ff939b3ba2f839b0163/artist_id.artist_id.js\",\n\t\"/client/3ff939b3ba2f839b0163/callback.callback.js\",\n\t\"/client/3ff939b3ba2f839b0163/item_id.item_id.js\",\n\t\"/client/3ff939b3ba2f839b0163/main.js\",\n\t\"/client/3ff939b3ba2f839b0163/publisher_id.publisher_id.js\",\n\t\"/client/3ff939b3ba2f839b0163/user_id.user_id.js\"\n];\n\nexport const routes = [\n\t{ pattern: /^\\/?$/ },\n\t{ pattern: /^\\/publisher\\/id\\/?$/ },\n\t{ pattern: /^\\/callback\\/?$/ },\n\t{ pattern: /^\\/account\\/?$/ },\n\t{ pattern: /^\\/account\\/settings\\/?$/ },\n\t{ pattern: /^\\/account\\/settings\\/edit-card\\/?$/ },\n\t{ pattern: /^\\/account\\/settings\\/add-card\\/?$/ },\n\t{ pattern: /^\\/account\\/orders\\/id\\/?$/ },\n\t{ pattern: /^\\/account\\/items\\/?$/ },\n\t{ pattern: /^\\/account\\/items\\/edit\\/?$/ },\n\t{ pattern: /^\\/account\\/items\\/new\\/?$/ },\n\t{ pattern: /^\\/artist\\/id\\/?$/ },\n\t{ pattern: /^\\/user\\/id\\/?$/ },\n\t{ pattern: /^\\/item\\/id\\/?$/ }\n];"
        },
        {
          "id": "./app/service-worker.js",
          "identifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
          "name": "./app/service-worker.js",
          "index": 0,
          "index2": 1,
          "size": 2163,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            "service-worker"
          ],
          "assets": [],
          "issuer": null,
          "issuerId": null,
          "issuerName": null,
          "issuerPath": null,
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": null,
              "moduleIdentifier": null,
              "module": null,
              "moduleName": null,
              "type": "single entry",
              "userRequest": "./app/service-worker.js",
              "loc": "service-worker"
            }
          ],
          "providedExports": [],
          "optimizationBailout": [],
          "depth": 0,
          "source": "import { timestamp, assets, shell, routes } from './manifest/service-worker.js';\n\nconst ASSETS = `cache${timestamp}`;\n\n// `shell` is an array of all the files generated by webpack,\n// `assets` is an array of everything in the `assets` directory\nconst to_cache = shell.concat(assets);\nconst cached = new Set(to_cache);\n\nself.addEventListener('install', event => {\n\tevent.waitUntil(\n\t\tcaches\n\t\t\t.open(ASSETS)\n\t\t\t.then(cache => cache.addAll(to_cache))\n\t\t\t.then(() => {\n\t\t\t\tself.skipWaiting();\n\t\t\t})\n\t);\n});\n\nself.addEventListener('activate', event => {\n\tevent.waitUntil(\n\t\tcaches.keys().then(async keys => {\n\t\t\t// delete old caches\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (key !== ASSETS) await caches.delete(key);\n\t\t\t}\n\n\t\t\tself.clients.claim();\n\t\t})\n\t);\n});\n\nself.addEventListener('fetch', event => {\n\tconst url = new URL(event.request.url);\n\n\t// don't try to handle e.g. data: URIs\n\tif (!url.protocol.startsWith('http')) return;\n\n\t// ignore dev server requests\n\tif (url.hostname === self.location.hostname && url.port !== self.location.port) return;\n\n\t// always serve assets and webpack-generated files from cache\n\tif (url.host === self.location.host && cached.has(url.pathname)) {\n\t\tevent.respondWith(caches.match(event.request));\n\t\treturn;\n\t}\n\n\t// for pages, you might want to serve a shell `index.html` file,\n\t// which Sapper has generated for you. It's not right for every\n\t// app, but if it's right for yours then uncomment this section\n\t/*\n\tif (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {\n\t\tevent.respondWith(caches.match('/index.html'));\n\t\treturn;\n\t}\n\t*/\n\n\t// for everything else, try the network first, falling back to\n\t// cache if the user is offline. (If the pages never change, you\n\t// might prefer a cache-first approach to a network-first one.)\n\tevent.respondWith(\n\t\tcaches\n\t\t\t.open(`offline${timestamp}`)\n\t\t\t.then(async cache => {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(event.request);\n\t\t\t\t\tcache.put(event.request, response.clone());\n\t\t\t\t\treturn response;\n\t\t\t\t} catch(err) {\n\t\t\t\t\tconst response = await cache.match(event.request);\n\t\t\t\t\tif (response) return response;\n\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t})\n\t);\n});\n"
        }
      ],
      "filteredModules": 0,
      "origins": [
        {
          "module": "",
          "moduleIdentifier": "",
          "moduleName": "",
          "loc": "service-worker",
          "request": "./app/service-worker.js",
          "reasons": []
        }
      ]
    }
  ],
  "modules": [
    {
      "id": "./app/manifest/service-worker.js",
      "identifier": "/Users/nikolaswise/Department/paper-club/app/manifest/service-worker.js",
      "name": "./app/manifest/service-worker.js",
      "index": 1,
      "index2": 0,
      "size": 2165,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        "service-worker"
      ],
      "assets": [],
      "issuer": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
      "issuerId": "./app/service-worker.js",
      "issuerName": "./app/service-worker.js",
      "issuerPath": [
        {
          "id": "./app/service-worker.js",
          "identifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
          "name": "./app/service-worker.js"
        }
      ],
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": "./app/service-worker.js",
          "moduleIdentifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
          "module": "./app/service-worker.js",
          "moduleName": "./app/service-worker.js",
          "type": "harmony side effect evaluation",
          "userRequest": "./manifest/service-worker.js",
          "loc": "1:0-80"
        },
        {
          "moduleId": "./app/service-worker.js",
          "moduleIdentifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
          "module": "./app/service-worker.js",
          "moduleName": "./app/service-worker.js",
          "type": "harmony import specifier",
          "userRequest": "./manifest/service-worker.js",
          "loc": "3:23-32"
        },
        {
          "moduleId": "./app/service-worker.js",
          "moduleIdentifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
          "module": "./app/service-worker.js",
          "moduleName": "./app/service-worker.js",
          "type": "harmony import specifier",
          "userRequest": "./manifest/service-worker.js",
          "loc": "7:17-22"
        },
        {
          "moduleId": "./app/service-worker.js",
          "moduleIdentifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
          "module": "./app/service-worker.js",
          "moduleName": "./app/service-worker.js",
          "type": "harmony import specifier",
          "userRequest": "./manifest/service-worker.js",
          "loc": "7:30-36"
        },
        {
          "moduleId": "./app/service-worker.js",
          "moduleIdentifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
          "module": "./app/service-worker.js",
          "moduleName": "./app/service-worker.js",
          "type": "harmony import specifier",
          "userRequest": "./manifest/service-worker.js",
          "loc": "64:19-28"
        }
      ],
      "providedExports": [
        "timestamp",
        "assets",
        "shell",
        "routes"
      ],
      "optimizationBailout": [],
      "depth": 1,
      "source": "// This file is generated by Sapper â€” do not edit it!\nexport const timestamp = 1525839394752;\n\nexport const assets = [\n\t\"favicon.png\",\n\t\"global.css\",\n\t\"great-success.png\",\n\t\"manifest.json\",\n\t\"svelte-logo-192.png\",\n\t\"svelte-logo-512.png\"\n];\n\nexport const shell = [\n\t\"/client/3ff939b3ba2f839b0163/account_orders_id.account_orders_id.js\",\n\t\"/client/3ff939b3ba2f839b0163/_._.js\",\n\t\"/client/3ff939b3ba2f839b0163/_5xx._5xx.js\",\n\t\"/client/3ff939b3ba2f839b0163/_~_4xx~_5xx~account~account_items~account_items_edit~account_items_new~account_orders_id~account_set~afba5f34._~_4xx~_5xx~account~account_items~account_items_edit~account_items_new~account_orders_id~account_set~afba5f34.js\",\n\t\"/client/3ff939b3ba2f839b0163/account.account.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_items.account_items.js\",\n\t\"/client/3ff939b3ba2f839b0163/0.0.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_items_edit.account_items_edit.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_items_new.account_items_new.js\",\n\t\"/client/3ff939b3ba2f839b0163/_4xx._4xx.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_settings.account_settings.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_settings_add_card.account_settings_add_card.js\",\n\t\"/client/3ff939b3ba2f839b0163/account_settings_edit_card.account_settings_edit_card.js\",\n\t\"/client/3ff939b3ba2f839b0163/artist_id.artist_id.js\",\n\t\"/client/3ff939b3ba2f839b0163/callback.callback.js\",\n\t\"/client/3ff939b3ba2f839b0163/item_id.item_id.js\",\n\t\"/client/3ff939b3ba2f839b0163/main.js\",\n\t\"/client/3ff939b3ba2f839b0163/publisher_id.publisher_id.js\",\n\t\"/client/3ff939b3ba2f839b0163/user_id.user_id.js\"\n];\n\nexport const routes = [\n\t{ pattern: /^\\/?$/ },\n\t{ pattern: /^\\/publisher\\/id\\/?$/ },\n\t{ pattern: /^\\/callback\\/?$/ },\n\t{ pattern: /^\\/account\\/?$/ },\n\t{ pattern: /^\\/account\\/settings\\/?$/ },\n\t{ pattern: /^\\/account\\/settings\\/edit-card\\/?$/ },\n\t{ pattern: /^\\/account\\/settings\\/add-card\\/?$/ },\n\t{ pattern: /^\\/account\\/orders\\/id\\/?$/ },\n\t{ pattern: /^\\/account\\/items\\/?$/ },\n\t{ pattern: /^\\/account\\/items\\/edit\\/?$/ },\n\t{ pattern: /^\\/account\\/items\\/new\\/?$/ },\n\t{ pattern: /^\\/artist\\/id\\/?$/ },\n\t{ pattern: /^\\/user\\/id\\/?$/ },\n\t{ pattern: /^\\/item\\/id\\/?$/ }\n];"
    },
    {
      "id": "./app/service-worker.js",
      "identifier": "/Users/nikolaswise/Department/paper-club/app/service-worker.js",
      "name": "./app/service-worker.js",
      "index": 0,
      "index2": 1,
      "size": 2163,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        "service-worker"
      ],
      "assets": [],
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "issuerPath": null,
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": null,
          "moduleIdentifier": null,
          "module": null,
          "moduleName": null,
          "type": "single entry",
          "userRequest": "./app/service-worker.js",
          "loc": "service-worker"
        }
      ],
      "providedExports": [],
      "optimizationBailout": [],
      "depth": 0,
      "source": "import { timestamp, assets, shell, routes } from './manifest/service-worker.js';\n\nconst ASSETS = `cache${timestamp}`;\n\n// `shell` is an array of all the files generated by webpack,\n// `assets` is an array of everything in the `assets` directory\nconst to_cache = shell.concat(assets);\nconst cached = new Set(to_cache);\n\nself.addEventListener('install', event => {\n\tevent.waitUntil(\n\t\tcaches\n\t\t\t.open(ASSETS)\n\t\t\t.then(cache => cache.addAll(to_cache))\n\t\t\t.then(() => {\n\t\t\t\tself.skipWaiting();\n\t\t\t})\n\t);\n});\n\nself.addEventListener('activate', event => {\n\tevent.waitUntil(\n\t\tcaches.keys().then(async keys => {\n\t\t\t// delete old caches\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (key !== ASSETS) await caches.delete(key);\n\t\t\t}\n\n\t\t\tself.clients.claim();\n\t\t})\n\t);\n});\n\nself.addEventListener('fetch', event => {\n\tconst url = new URL(event.request.url);\n\n\t// don't try to handle e.g. data: URIs\n\tif (!url.protocol.startsWith('http')) return;\n\n\t// ignore dev server requests\n\tif (url.hostname === self.location.hostname && url.port !== self.location.port) return;\n\n\t// always serve assets and webpack-generated files from cache\n\tif (url.host === self.location.host && cached.has(url.pathname)) {\n\t\tevent.respondWith(caches.match(event.request));\n\t\treturn;\n\t}\n\n\t// for pages, you might want to serve a shell `index.html` file,\n\t// which Sapper has generated for you. It's not right for every\n\t// app, but if it's right for yours then uncomment this section\n\t/*\n\tif (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {\n\t\tevent.respondWith(caches.match('/index.html'));\n\t\treturn;\n\t}\n\t*/\n\n\t// for everything else, try the network first, falling back to\n\t// cache if the user is offline. (If the pages never change, you\n\t// might prefer a cache-first approach to a network-first one.)\n\tevent.respondWith(\n\t\tcaches\n\t\t\t.open(`offline${timestamp}`)\n\t\t\t.then(async cache => {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(event.request);\n\t\t\t\t\tcache.put(event.request, response.clone());\n\t\t\t\t\treturn response;\n\t\t\t\t} catch(err) {\n\t\t\t\t\tconst response = await cache.match(event.request);\n\t\t\t\t\tif (response) return response;\n\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t})\n\t);\n});\n"
    }
  ],
  "filteredModules": 0,
  "children": []
}